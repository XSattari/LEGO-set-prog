class AllSets:
    def __init__(self):
        self.sets = []
    
    def getSet(self):
        return self.sets

    def addSet(self, nset):
        self.sets.append(nset)

    def removeSet(self, nset):
        self.sets.remove(nset)

    def noOfSets(self):
        return len(self.sets)

class Set:
    def __init__(self, name):
        self.name = name
        self.set = []
        self.sort = 0
        self.hasRequired = 0

    def getName(self):
        return self.name
    
    def setName(self, new):
        self.name = new

    def addLego(self, lego):
        self.set.append(lego)

    def removeLego(self, lego):
        self.set.remove(lego)

    def getSort(self):
        return self.sort

    def setSort(self, new):
        self.sort = new

    def getSet(self):
        return self.set
    
    def getHasRequired(self):
        return self.hasRequired
    
    def setHasRequired(self, new):
        self.hasRequired = new

    def getSortedSet(self):
        if self.sort == 0:
            return self.set
        elif self.sort == 1:
            return self.set[::-1]
        elif self.sort == 2:
            return sorted(self.set, key= lambda x: x.getElem())
        elif self.sort == 3:
            return sorted(self.set, key= lambda x: x.getElem(), reverse = True)
        elif self.sort == 4:
            return sorted(self.set, key= lambda x: x.getColour())
        elif self.sort == 5:
            return sorted(self.set, key= lambda x: x.getColour(), reverse = True)
        elif self.sort == 6:
            return sorted(self.set, key= lambda x: x.getLegoNumber())
        elif self.sort == 7:
            return sorted(self.set, key= lambda x: x.getLegoNumber(), reverse = True)
        elif self.sort == 8:
            return sorted(self.set, key= lambda x: x.getAmount())
        elif self.sort == 9:
            return sorted(self.set, key= lambda x: x.getAmount(), reverse = True)
        elif self.sort == 10:
            return sorted(self.set, key= lambda x: x.getRequired())
        elif self.sort == 11:
            return sorted(self.set, key= lambda x: x.getRequired(), reverse = True)
        elif self.sort == 12:
            return sorted(self.set, key= lambda x: x.getNeededToComplete())
        else:
            return sorted(self.set, key= lambda x: x.getNeededToComplete(), reverse = True)

    def getSortName(self, num):
        sortslist = ["Date added: Oldest to Newest", "Date added: Newest to Oldest", "Element Number: Low to High", "Element Number: High to Low", "Colour: A to Z", "Colour: Z to A", "LEGO Number: Low to High", "LEGO Number: High to Low", "Amount in set: Low to High", "Amount in set: High to Low", "Amount Required: Low to High", "Amount Required: High to Low", "Amount needed to complete: Low to High", "Amount needed to complete: High to Low"]
        return sortslist[num]

class Lego:
    def __init__(self, lego_number, number_hashtable):
        self.lego_number = lego_number

        hash_index = number_hashtable.hashKey(int(lego_number))
        temp = number_hashtable.getItem(hash_index, int(lego_number))
        elem, colour = temp.split(",")

        self.colour = colour
        self.elem = elem
        self.amount = 0
        self.requiredAmount = 0

    def getLegoNumber(self):
        return self.lego_number
    
    def getColour(self):
        return self.colour
    
    def getElem(self):
        return self.elem
    
    def getAmount(self):
        return self.amount
    
    def setAmount(self, new):
        self.amount = new

    def getRequired(self):
        return self.requiredAmount
    
    def setRequired(self, new):
        self.requiredAmount = new

    def getNeededToComplete(self):
        return 0 if self.amount >= self.requiredAmount else self.requiredAmount - self.amount
