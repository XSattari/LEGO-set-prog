import random
from PIL import ImageEnhance
import PIL.ImageOps

class aug:

    @staticmethod
    def augment(img, inv=False):
        #Applies random geometric augmentation from 3 options
        geo_trans_rand = random.randint(1, 3)
        func = ["aug.rot(img)", "aug.crop(img)", "aug.zoom(img)"]
        img = eval(func[geo_trans_rand - 1])

        #Applies colour augmentation
        b_or_c = random.randint(1,2)
        if b_or_c == 1:
            img = aug.contrast(img)
        else:
            img = aug.brightness(img)
        img = aug.sharpness(img)
        #both brightness and contrast augmentation have the effect of dimming image. Thus, if both applied then larger dist. of dim images.
        #therefore, only one of the two shall be applied

        #invert 1/2 of images if inv
        if inv:
            inv = random.randint(1, 2)
            if inv == 2:
                img = aug.invert(img)

        return img

    @staticmethod
    def rot(img):
        n = random.randrange(0,360)
        img = img.rotate(n)
        return img

    @staticmethod
    def crop(img):
        #estimate leg makes up 60% of image from centre
        #so, crop randomly such that this inner 60% always part of the image. did calculations to ensure this
        x = img.size
        lrfrac = random.randrange(-200, 200)/1000
        ubfrac = random.randrange(-200, 200)/1000
        l = x[0] * lrfrac
        u = x[0] * ubfrac
        r = x[0] + l
        b = x[0] + u
        img = img.crop((l, u, r, b))
        return img

    @staticmethod
    def zoom(img):
        #estimate lego makes up 60% of image from centre
        x = img.size
        frac = random.randrange(60, 100)/100
        l = x[0] * ((1-frac)/2)
        u = x[0] * ((1-frac)/2)
        r = x[0] - l
        b = x[0] - u
        img = img.crop((l, u, r, b))
        return img

    @staticmethod 
    def contrast(img):
        n = random.randrange(25, 100)
        img = ImageEnhance.Contrast(img).enhance(n/100)
        return img

    @staticmethod
    def brightness(img):
        n = random.randrange(25, 100)
        img = ImageEnhance.Brightness(img).enhance(n/100)
        return img

    @staticmethod
    def sharpness(img):
        n = random.randrange(0, 100)
        img = ImageEnhance.Sharpness(img).enhance(n/100)
        return img
    
    @staticmethod
    def invert(img):
        img = PIL.ImageOps.invert(img)
        return img
    
    @staticmethod
    def aspect(img, mode="min"):
        sze = img.size
        
        if mode == "min":
            mn = min(sze)
            l = (sze[0] - mn)/2
            u = (sze[1] - mn)/2
        else:
            mn = max(sze)
            l = -((mn - sze[0])/2)
            u = -((mn - sze[1])/2)

        r = sze[0] - l
        b = sze[1] - u
        img = img.crop((l, u, r, b))
        return img 
