import random

class mm:
    
    @staticmethod
    def makematrix(rows, columns, num=None, gauss=None):
        matrix = []
        for i in range(rows):
            matrixrow = []
            for j in range(columns):
                if type(num) != list:
                    matrixrow.append(num) 
                elif gauss:
                    matrixrow.append(random.gauss(num[0], num[1]))
                else:
                    matrixrow.append(random.uniform(num[0], num[1]))
            matrix.append(matrixrow)
        return matrix
    
    @staticmethod
    def dotprod(a, b):
        matrix = []
        if mm.dim(a)[1] != mm.dim(b)[0]:
            return "\nError: cannot compute dot product with given matrix dimensions"
        for a_row in range(mm.dim(a)[0]):
            mrow = []
            for b_col in range(mm.dim(b)[1]):
                temp = 0 
                for a_col in range(mm.dim(a)[1]):
                    temp += a[a_row][a_col] * b[a_col][b_col]
                mrow.append(temp)
            matrix.append(mrow)
        return matrix
    
    @staticmethod
    def summatrix(a, b):
        if mm.dim(a) != mm.dim(b):
            return "\nError: cannot compute sum with given matrix dimensions"
        matrix = []
        for row in range(mm.dim(a)[0]):
            mrow = []
            for x in range(mm.dim(a)[1]):
                mrow.append(a[row][x] + b[row][x])
            matrix.append(mrow)
        return matrix
    
    @staticmethod
    def submatrix(a, b):
        if mm.dim(a) != mm.dim(b):
            return "\nError: cannot compute difference with given matrix dimensions"
        if type(a[0][0]) == list:
            newmatrix = []
            for i in range(len(a)):
                newmatrix.append(mm.submatrix(a[i], b[i]))
            return newmatrix
        else:
            matrix = []
            for row in range(mm.dim(a)[0]):
                mrow = []
                for x in range(mm.dim(a)[1]):
                    mrow.append(a[row][x] - b[row][x])
                matrix.append(mrow)
            return matrix
    
    # if matrix is not two-dimensional, then recursively computes scalar
    @staticmethod
    def scalematrix(a, scalar):
        if type(a[0][0]) == list:
            newmatrix = []
            for i in a:
                newmatrix.append(mm.scalematrix(i, scalar))
            return newmatrix
        else:
            matrix = mm.copy(a)
            for row in matrix:
                for item in range(mm.dim(matrix)[1]):
                    row[item] *= scalar
            return matrix
    
    @staticmethod
    def raise_power(a, indice):
        matrix = mm.copy(a)
        for row in matrix:
            for item in range(mm.dim(matrix)[1]):
                row[item] **= indice
        return matrix  
    
    @staticmethod
    def hadamard(a, b):
        if mm.dim(a) != mm.dim(b):
            return "\nError: cannot compute hadamard with given matrix dimensions"
        matrix = []
        for row in range(mm.dim(a)[0]):
            mrow = []
            for x in range(mm.dim(a)[1]):
                mrow.append(a[row][x] * b[row][x])
            matrix.append(mrow)
        return matrix
    
    @staticmethod
    def transpose(a):
        matrix = []
        for col in range(mm.dim(a)[1]):
            mrow = []
            for row in range(mm.dim(a)[0]):
                mrow.append(a[row][col])
            matrix.append(mrow)
        return matrix

    @staticmethod
    def msError(output, val_true):
        diff = mm.submatrix(output, val_true)
        return mm.scalematrix(mm.raise_power(diff, 2), (1/mm.dim(output)[0]))

    @staticmethod
    def dE_dO(output, val_true):
        diff = mm.submatrix(output, val_true)
        return mm.scalematrix(diff, (2/mm.dim(output)[0]))
    
    @staticmethod
    def dim(matrix):
        rows = len(matrix)
        if type(matrix[0]) in (int, float):
            col = 1
        else:
            col = len(matrix[0])
        return rows, col
    
    @staticmethod
    def alter_dim(matrix, newdim):
        newmatrix = mm.copy(matrix)
        if newdim[0] == 1:
            return [newmatrix]
        elif newdim[1] == 1:
            for i in range(len(newmatrix)):
                newmatrix[i] = [newmatrix[i]]
            return newmatrix
        else:
            print("weird input")
            
    @staticmethod
    def copy(a):
        newmatrix = []
        if type(a[0]) in (int, float):
           newmatrix = a.copy()
        else: 
            for row in a:
                newmatrix.append(row.copy())
        return newmatrix          
        
    @staticmethod
    def testrand(size):
        c = 0
        l = []
        while c<size:
            l.append(c)
            c+= 1
            
        random.shuffle(l)
        return l
    
    @staticmethod
    def identity(size):
        matrix = []
        for i in range(size):
            row = [0]*size
            row[i] = 1
            matrix.append(row)
        return matrix

    @staticmethod
    def convolve(matrix, kernel, full=None):
        dimk = mm.dim(kernel)
        dimm = mm.dim(matrix)
        
        if full == "full":
            temp = []
            for i in range(dimk[0]-1):
                temp.append([0]*((2*(dimk[1]-1))+dimm[1]))
            matrix = temp + [[0]*(dimk[1]-1) + item + [0]*(dimk[1]-1) for item in matrix.copy()] + temp
            dimm = mm.dim(matrix)
            
        outp = []
        for r in range(dimm[0]-dimk[0]+1):
            temp_row = []
            for c in range(dimm[1]-dimk[1]+1):
                temp = mm.hadamard([h[c:dimk[0]+c] for h in mm.copy(matrix)[r:dimk[1]+r]], kernel)
                temp = sum([sum(i) for i in temp])
                temp_row.append(temp)
            outp.append(temp_row)
        return outp
    
    @staticmethod
    def rot(matrix):
        outp = []
        for i in matrix:
            outp.append(i[::-1])
        return outp[::-1]
    
    @staticmethod
    def pool(matrix, size, stride, mode):
        x, y = mm.dim(matrix)
        outp = []
        indices = []
        for r in range(0, x-size[0]+1, stride):
            row = []
            for c in range(0, y-size[0]+1, stride):
                temp = []
                cont = [z[c:c+size[1]] for z in mm.copy(matrix)[r:r+size[0]]]
                for i in cont:
                    temp += i
                if mode == 'max':
                    index = temp.index(max(temp))
                    indices.append(((index//size[0])+r, (index%size[1])+c))
                    row.append(max(temp))
                elif mode == 'min':
                    row.append(min(temp))
                elif mode == 'mean':
                    row.append((sum(temp))/len(temp))
            outp.append(row)
        return outp, indices
