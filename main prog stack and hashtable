class Hashtable:
    def __init__(self, size):
        self.size = size
        self.contents = [None]*size
        self.collisions = 0
        self.no_of_items = 0

    def getContents(self):
        return self.contents
    
    def setItem(self, index, key, value):
        if self.no_of_items == self.size:
            return "table full"
        else:
            self.no_of_items += 1

        if self.contents[index] == None:
            self.contents[index] = [key, value, []]
        else:
            self.collisions += 1
            newindex = index
            while self.contents[newindex] != None:
                newindex += 1
                newindex %= self.size
            self.contents[newindex] = [key, value, []]
            self.contents[index][2].append(newindex)

    def hashKey(self, input):
        return (input*3) % self.size
    
    def getItem(self, index, key):
        cont = self.contents[index]
        if cont == None:
            return False
        
        if cont[0] == key:
            return cont[1]
        else:
            for i in cont[2]:
                if self.contents[i][0] == key:
                    return self.contents[i][1]
            return False
        
    def getCollision(self):
        return self.collisions
        
    def getNumberOfItems(self):
        return self.no_of_items

class mainProgramStack:
    def __init__(self, elems, colours, colourelem_hashtable, number_hashtable):
        self.stack = []
        self.pointer = 0
        self.currentimg = None
        self.currentset = None
        self.elems = elems
        self.colours = colours
        self.hashtable = colourelem_hashtable
        self.number_hashtable = number_hashtable
        self.allSets = None

    def push(self, state):
        self.stack.append(state)
        self.pointer+=1

    def pop(self):
        if self.pointer > 0:
            self.stack.pop()
            self.pointer -= 1
        else:
            print("Stack empty")

    def peek(self):
        if self.pointer > 0:
            return self.stack[self.pointer-1]
        else:
            print("Stack empty")

    def getElems(self):
        return self.elems
    
    def getColours(self):
        return self.colours
    
    def getHashtable(self):
        return self.hashtable
    
    def getNumberHashtable(self):
        return self.number_hashtable

    def getImg(self):
        return self.currentimg
    
    def setImg(self, new):
        self.currentimg = new

    def getSet(self):
        return self.currentset
    
    def setSet(self, new):
        self.currentset = new

    def getAllSets(self):
        return self.allSets
    
    def setAllSets(self, new):
        self.allSets = new
